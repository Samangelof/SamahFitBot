# payment_utils.py
import uuid
import aiohttp
import asyncio
import base64
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Bot
from bot.utils.logger import log_info
from bot.settings.setup_bot import db
from bot.settings.config import SHOP_ID, SHOP_SECRET_KEY, PAYMENT_AMOUNT, TELEGRAM_BOT_USERNAME, BOT_TOKEN
from bot.database.crud import referral as referral_crud
from bot.database.crud import applications as application_crud


async def check_payment_status(payment_id: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ API –ÆKassa.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω, –∏–Ω–∞—á–µ False.
    """
    auth_string = f"{SHOP_ID}:{SHOP_SECRET_KEY}"
    basic_auth = base64.b64encode(auth_string.encode()).decode()

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Basic {basic_auth}"
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"https://api.yookassa.ru/v3/payments/{payment_id}",
                headers=headers
            ) as response:
                if response.status == 200:
                    response_data = await response.json()
                    payment_status = response_data.get('status')
                    if payment_status == 'succeeded':
                        return True
                return False
    except Exception as e:
        log_info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
        return False

async def handle_payment_reminder(message, payment_id: str, confirmation_url: str):
    """
    –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞,
    –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω.
    """
    await asyncio.sleep(86400)

    if not await check_payment_status(payment_id):
        await message.answer(
            "–¢—ã –µ—â—ë –Ω–µ –æ–ø–ª–∞—Ç–∏–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", url=confirmation_url)
            )
        )
        log_info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ –¥–ª—è payment_id: {payment_id}")

async def generate_payment_link(message: types.Message, state: FSMContext, application_id: int):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –ÆKassa
    """
    telegram_id = message.from_user.id

    with db.session_scope() as session:
        # 1. –°—á–∏—Ç–∞–µ–º —Å–∫–∏–¥–∫—É
        discount_percent = referral_crud.get_discount_percent(session, telegram_id)

        # 2. –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É
        base_amount = float(PAYMENT_AMOUNT)
        final_amount = round(base_amount * (1 - discount_percent / 100), 2)

        # 3. –ì–µ–Ω–µ—Ä–∏–º payment_id –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º "–Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ"
        payment_id = str(uuid.uuid4())
        application_crud.update_payment_status(
            session, application_id, "–Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ", payment_id
        )
        
    payment_data = {
        "amount": {
            "value": str(final_amount),
            "currency": "RUB"
        },
        "capture": True,
        "confirmation": {
            "type": "redirect",
            "return_url": f"https://t.me/{TELEGRAM_BOT_USERNAME}"
        },
        "description": f"–û–ø–ª–∞—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã. –ó–∞—è–≤–∫–∞ #{application_id}",
        "metadata": {
            "label": payment_id
        }
    }
    auth_string = f"{SHOP_ID}:{SHOP_SECRET_KEY}"
    basic_auth = base64.b64encode(auth_string.encode()).decode()

    headers = {
        "Content-Type": "application/json",
        "Idempotence-Key": payment_id,
        "Authorization": f"Basic {basic_auth}"
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "https://api.yookassa.ru/v3/payments",
                json=payment_data,
                headers=headers
            ) as response:
                if response.status == 200:
                    response_data = await response.json()
                    confirmation_url = response_data.get('confirmation', {}).get('confirmation_url')
                    
                    if confirmation_url:
                        with db.session_scope() as session:
                            application_crud.update_payment_url(session, application_id, confirmation_url)

                        await message.answer(
                            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É.\n\n"
                            f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ —Å —É—á—ë—Ç–æ–º —Å–∫–∏–¥–∫–∏: {final_amount} —Ä—É–±. (—Å–∫–∏–¥–∫–∞ {discount_percent}%)\n\n"
                            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:",
                            reply_markup=types.InlineKeyboardMarkup().add(
                                types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", url=confirmation_url)
                            )
                        )
                        asyncio.create_task(handle_payment_reminder(message, payment_id, confirmation_url))
                        log_info(f"–°–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–ª—è –∑–∞—è–≤–∫–∏ {application_id}, payment_id: {payment_id}")
                        return True
                    else:
                        log_info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç confirmation_url –≤ –æ—Ç–≤–µ—Ç–µ")
                else:
                    error_data = await response.text()
                    log_info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {response.status} - {error_data}")
        
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        return False
        
    except Exception as e:
        log_info(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        return False

async def send_thank_you_message(user_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    """
    
    bot = Bot(token=BOT_TOKEN)
    
    try:
        await bot.send_message(
            user_id,
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!\n"
            "–¢—ã —Å–¥–µ–ª–∞–ª(–∞) –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ —Å–≤–æ–µ–π –Ω–æ–≤–æ–π —Ñ–æ—Ä–º–µ!\n"
            "–ì–æ—Ç–æ–≤–∏–º—Å—è –º–µ–Ω—è—Ç—å –∂–∏–∑–Ω—å!\n\n"
            "‚öôÔ∏è –°–µ–π—á–∞—Å —è –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –∏ –ø–æ–¥–±–∏—Ä–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –ø–∏—Ç–∞–Ω–∏—è.\n"
            "–í—Å–µ –¥–µ–ª–∞—é –≤—Ä—É—á–Ω—É—é, —Å –¥—É—à–æ–π –∏ –≤–Ω–∏–º–∞–Ω–∏–µ–º –∫ –¥–µ—Ç–∞–ª—è–º ‚Äî –Ω–∏–∫–∞–∫–æ–≥–æ –∫–æ–ø–∏–ø–∞—Å—Ç–∞!\n\n"
            "‚è≥ –û–∂–∏–¥–∞–π PDF-–¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 1‚Äì2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π ‚Äî —Ç–∞–º –±—É–¥–µ—Ç –≤—Å—ë:\n"
            "—á—Ç–æ –µ—Å—Ç—å üçΩÔ∏è, –∫–∞–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è üèãÔ∏è‚Äç‚ôÄÔ∏è, –∫–æ–≥–¥–∞ –æ—Ç–¥—ã—Ö–∞—Ç—å üí§ –∏ –∫–∞–∫ —É–≤–µ—Ä–µ–Ω–Ω–æ –∏–¥—Ç–∏ –∫ —Ü–µ–ª–∏!\n\n"
            "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –∑–∞—Ö–æ—á–µ—à—å —É—Ç–æ—á–Ω–∏—Ç—å ‚Äî –ø–∏—à–∏, —è –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!\n\n"
            "–°–∫–æ—Ä–æ –Ω–∞—á–Ω—ë–º!\n"
            "üî• #–¢–≤–æ–π–ü—É—Ç—å–ù–∞—á–∞–ª—Å—è"
        )
        log_info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        return True
    except Exception as e:
        log_info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        return False