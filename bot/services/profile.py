from bot.settings.setup_bot import dp
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import InputFile, ReplyKeyboardRemove
from bot.states.states import ParticipantStates
from bot.keyboards.keyboards import get_gender_keyboard, get_back_keyboard, get_physical_condition_keyboard
from bot.utils.debug_log import log_user_input, log_fsm_state
from bot.handlers.commands import start_command
from bot.utils.utils import send_with_progress


@dp.message_handler(state=ParticipantStates.WAITING_WELCOME)
async def process_welcome(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã'"""
    if message.text != "–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã.")
        return

    await ParticipantStates.WAITING_FOR_NAME.set()
    await send_with_progress(message, state, "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=ReplyKeyboardRemove())


@dp.message_handler(state=ParticipantStates.WAITING_FOR_NAME)
async def process_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""
    # log_info(f"[NAME] –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} | @{message.from_user.username} | —Ç–µ–∫—Å—Ç: {message.text}")
    log_user_input(message, label="NAME")

    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await start_command(message, state)
        return
    
    name = message.text.strip()

    if not name.isalpha() or len(name) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –±–µ–∑ —Ü–∏—Ñ—Ä –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    if message.text.lower() in ["–Ω–∏–∫—Ç–æ", "–Ω–∏–∫–∞–∫", "–æ—Ç–º–µ–Ω–∞", "–Ω–µ—Ç"]:
        await message.answer(f"–£–≤–∞–∂–∞–µ–º—ã–π, –≤–≤–µ–¥–∏ —Å–≤–æ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è")
        return


    await state.update_data(name=name)
    await log_fsm_state(message, state)

    await ParticipantStates.WAITING_FOR_GENDER.set()
    await send_with_progress(message, state, "–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª.", reply_markup=get_gender_keyboard())


@dp.message_handler(state=ParticipantStates.WAITING_FOR_GENDER)
async def process_gender(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–∞"""
    log_user_input(message, label="GENDER")

    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await ParticipantStates.WAITING_FOR_NAME.set()
        await send_with_progress(message, state, "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=get_back_keyboard())
        return
    
    gender = message.text.strip().lower()

    if gender not in ["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π", "–º", "–∂", "m", "w"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá.")
        return

    await state.update_data(gender=gender)
    await log_fsm_state(message, state)
    await ParticipantStates.WAITING_FOR_AGE.set()
    await send_with_progress(message, state, "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=get_back_keyboard())


@dp.message_handler(state=ParticipantStates.WAITING_FOR_AGE)
async def process_age(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    log_user_input(message, label="AGE")
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await ParticipantStates.WAITING_FOR_GENDER.set()
        await message.answer("–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª.", reply_markup=get_gender_keyboard())
        return
    
    age_text = message.text.strip()
    if not age_text.isdigit() or not (10 <= int(age_text) <= 100):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 10 –¥–æ 100 –ª–µ—Ç.")
        return

    await state.update_data(age=int(age_text))
    await log_fsm_state(message, state)

    await ParticipantStates.WAITING_FOR_HEIGHT.set()
    await send_with_progress(message, state, "–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö?", reply_markup=get_back_keyboard())

@dp.message_handler(state=ParticipantStates.WAITING_FOR_HEIGHT)
async def process_height(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Å—Ç–∞"""
    log_user_input(message, label="HEIGHT")

    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await ParticipantStates.WAITING_FOR_AGE.set()
        await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=get_back_keyboard())
        return
    
    height_text = message.text.strip()
    if not height_text.isdigit() or not (100 <= int(height_text) <= 250):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 100 –¥–æ 250 —Å–º.")
        return

    await state.update_data(height=int(height_text))
    await log_fsm_state(message, state)

    await ParticipantStates.WAITING_FOR_WEIGHT.set()
    await send_with_progress(message, state, "–ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö?", reply_markup=get_back_keyboard())
    
@dp.message_handler(state=ParticipantStates.WAITING_FOR_WEIGHT)
async def process_weight(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Å–∞"""
    log_user_input(message, label="WEIGHT")

    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await ParticipantStates.WAITING_FOR_HEIGHT.set()
        await message.answer("–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö?", reply_markup=get_back_keyboard())
        return

    weight_text = message.text.strip()
    if not weight_text.isdigit() or int(weight_text) <= 0:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å —á–∏—Å–ª–æ–º.")
        return

    if not weight_text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–µ—Å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 75).")
        return

    weight = int(weight_text)
    if weight < 30 or weight > 300:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ä–µ–∞–ª—å–Ω—ã–π –≤–µ—Å –æ—Ç 30 –¥–æ 300 –∫–≥.")
        return
    
    await state.update_data(weight=int(weight_text))
    await log_fsm_state(message, state)

    await ParticipantStates.WAITING_FOR_PHYSICAL_CONDITION.set()
    await send_with_progress(message, state, "–ö–∞–∫ —Ç—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å —Å–≤–æ—é —Ñ–∏–∑–∏—á–µ—Å–∫—É—é —Ñ–æ—Ä–º—É?", reply_markup=get_physical_condition_keyboard())