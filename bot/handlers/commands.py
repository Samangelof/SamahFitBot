from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from bot.settings.setup_bot import dp, db
from bot.states.states import ParticipantStates
from bot.utils.logger import log_info, log_error, log_warning
from bot.keyboards.keyboards import get_start_keyboard
from bot.utils.excel_export import export_to_excel
from bot.settings.config import ADMIN_IDS, TELEGRAM_BOT_USERNAME
from bot.services.supplements import process_sports_nutrition_experience


#! DEBUG [HACK] - —É–±—Ä–∞—Ç—å –Ω–∞ –ø—Ä–æ–¥–µ
@dp.message_handler(commands=["start"], state="*")
async def start_command(message: types.Message, state: FSMContext):
    """[HACK] –°–∫–∏–¥—ã–≤–∞–µ–º –Ω–∞ –Ω—É–∂–Ω—ã–π —Å—Ç–µ–π—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    await state.set_state(ParticipantStates.WAITING_FOR_SPORTS_NUTRITION_EXPERIENCE)

    await process_sports_nutrition_experience(message, state)


# @dp.message_handler(commands=["start"], state="*")
# async def start_command(message: types.Message, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∏"""
#     log_info(f"start_command | message: {message.text}")
#     await state.finish()
#     log_info(f'message.from_user: {message.from_user}')
#     db.add_user_if_not_exists(message.from_user)
#     db.log_user_visit(message.from_user)


#     args = message.get_args()
#     if args.isdigit():
#         inviter_telegram_id = int(args)
#         if inviter_telegram_id != message.from_user.id:
#             db.add_referral(inviter_telegram_id, message.from_user.id)
#             log_info(f"User {message.from_user.id} –±—ã–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {inviter_telegram_id}")
#         else:
#             log_info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–∞–º —Å–µ–±—è ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")

#     await message.answer(
#         "–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –ø–∏—Ç–∞–Ω–∏—è üí™\n\n"
#     )

#     video_path = InputFile("bot/roundles/start.mp4")
#     await message.answer_video_note(video_path)

#     await message.answer("–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º! üëá", reply_markup=get_start_keyboard())
#     await ParticipantStates.WAITING_WELCOME.set()




@dp.message_handler(commands=['status'], state="*")
async def check_payment_status_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã"""
    log_info(f"check_payment_status_command | from user {message.from_user.id}")

    applications = db.get_user_applications(message.from_user.id)
    
    if not applications:
        await message.answer("–£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –∑–∞—è–≤–æ–∫. –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É, –Ω–∞–∂–º–∏ /start")
        return
    
    latest_app = applications[0]

    if latest_app['payment_status'] == '–æ–ø–ª–∞—á–µ–Ω–æ':
        await message.answer(
            "‚úÖ –¢–≤–æ—è –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞!\n\n"
        )
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!\n"
            "–¢—ã —Å–¥–µ–ª–∞–ª(–∞) –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ —Å–≤–æ–µ–π –Ω–æ–≤–æ–π —Ñ–æ—Ä–º–µ!\n"
            "–ì–æ—Ç–æ–≤–∏–º—Å—è –º–µ–Ω—è—Ç—å –∂–∏–∑–Ω—å!\n\n"
            "‚öôÔ∏è –°–µ–π—á–∞—Å —è –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –∏ –ø–æ–¥–±–∏—Ä–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –ø–∏—Ç–∞–Ω–∏—è.\n"
            "–í—Å–µ –¥–µ–ª–∞—é –≤—Ä—É—á–Ω—É—é, —Å –¥—É—à–æ–π –∏ –≤–Ω–∏–º–∞–Ω–∏–µ–º –∫ –¥–µ—Ç–∞–ª—è–º ‚Äî –Ω–∏–∫–∞–∫–æ–≥–æ –∫–æ–ø–∏–ø–∞—Å—Ç–∞!\n\n"
            "‚è≥ –û–∂–∏–¥–∞–π PDF-–¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 1‚Äì2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π ‚Äî —Ç–∞–º –±—É–¥–µ—Ç –≤—Å—ë:\n"
            "—á—Ç–æ –µ—Å—Ç—å üçΩÔ∏è, –∫–∞–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è üèãÔ∏è‚Äç‚ôÄÔ∏è, –∫–æ–≥–¥–∞ –æ—Ç–¥—ã—Ö–∞—Ç—å üí§ –∏ –∫–∞–∫ —É–≤–µ—Ä–µ–Ω–Ω–æ –∏–¥—Ç–∏ –∫ —Ü–µ–ª–∏!\n\n"
            "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –∑–∞—Ö–æ—á–µ—à—å —É—Ç–æ—á–Ω–∏—Ç—å ‚Äî –ø–∏—à–∏, —è –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!\n\n"
            "–°–∫–æ—Ä–æ –Ω–∞—á–Ω—ë–º!\n"
            "üî• #–¢–≤–æ–π–ü—É—Ç—å–ù–∞—á–∞–ª—Å—è"
        )
    else:
        # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É
        payment_id = latest_app.get('payment_id')
        
        if payment_id:
            from bot.services.payment_service import generate_payment_link
            await generate_payment_link(message, None, latest_app['id'])
        else:
            await message.answer(
                "üîÑ –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∞.\n\n"
                "–î–ª—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"pay_{latest_app['id']}")
                )
            )

@dp.message_handler(commands=["my_discount"], state="*")
async def my_discount_command(message: types.Message):
    from bot.database.sqlite_db import DatabaseManager
    from bot.settings.config import DATABASE_PATH
    
    db = DatabaseManager(DATABASE_PATH)
    
    telegram_id = message.from_user.id
    discount_percent = db.get_discount_percent(telegram_id)
    
    await message.answer(f"–¢–≤–æ—è —Ç–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞: {discount_percent}%.\n\n"
                         "–ü—Ä–∏–≤–æ–¥–∏ –¥—Ä—É–∑–µ–π –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–π —Å–∫–∏–¥–∫—É –¥–æ 50%!")


@dp.message_handler(commands=["my_referral_link"], state="*")
async def my_referral_link_command(message: types.Message):
    telegram_id = message.from_user.id
    referral_link = f"https://t.me/{TELEGRAM_BOT_USERNAME}?start={telegram_id}"
    
    await message.answer(f"–í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n{referral_link}\n\n"
                         "–û—Ç–ø—Ä–∞–≤–ª—è–π –µ—ë –¥—Ä—É–∑—å—è–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Å–∫–∏–¥–∫—É –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ üí™")



@dp.callback_query_handler(lambda c: c.data and c.data.startswith('pay_'))
async def process_payment_button(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã"""
    await callback_query.answer()
    log_info(f"process_payment_button | from user {callback_query.from_user.id}")
    
    app_id = int(callback_query.data.split('_')[1])
    
    from bot.services.payment_service import generate_payment_link
    await generate_payment_link(callback_query.message, None, app_id)


@dp.message_handler(commands=['get_data'], state="*")
async def get_data_command(message: types.Message):
    """–í—ã–≥—Ä—É–∑–∫–∞ Excel —Å –∑–∞—è–≤–∫–∞–º–∏ (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º)"""
    if message.from_user.id not in ADMIN_IDS:
        log_warning(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–¥–º–∏–Ω–∞ {message.from_user.id} –≤—ã–∑–≤–∞—Ç—å /get_data")
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    log_info(f"get_data_command | –∞–¥–º–∏–Ω {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–∞–Ω–Ω—ã–µ")

    db_path = "bot_database.db"
    excel_path = "export.xlsx"
    export_to_excel(db_path, excel_path)

    await message.answer_document(InputFile(excel_path), caption="–í–æ—Ç —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ üìä")


@dp.message_handler(commands=['stats'], state="*")
async def bot_stats(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    visits = db.get_daily_visits()

    if not visits:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
        return

    text = "üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:\n\n"
    for date, count in visits:
        text += f"üìÖ {date}: {count} –≤–∏–∑–∏—Ç–æ–≤\n"

    unique_users = db.get_unique_user_count()
    text += f"\nüë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ: {unique_users}"

    await message.answer(text)
